DAY 36
#Basic Node and Express
1. **Node.js Overview:**
   - JavaScript runtime for server-side development.
   - Allows developers to write backend programs in JavaScript.

2. **Core Node.js Modules:**
   - HTTP: Acts as a server.
   - File System: Enables reading and modifying files.

3. **npm (Node Package Manager):**
   - Used for installing and managing packages.
   - Packages are collections of smaller modules.

4. **Express Framework:**
   - Lightweight web application framework.
   - Among the most popular npm packages.
   - Facilitates server creation and handling routing.

5. **Routing with Express:**
   - Simplifies directing users to specific endpoints (e.g., /blog).
   - Eases the handling of different requests from the browser.

6. **Course Objectives:**
   - Learn basics of Node.js and Express.
   - Create a server.
   - Serve various files.
   - Handle different browser requests.

#Start a Working Express Server
1. **Express App Initialization:**
   - Use the following code to create an Express app object in myApp.js:
     ```javascript
     const express = require('express');
     const app = express();
     ```

2. **Listening to Port:**
   - Set up the server to listen on a specific port using `app.listen(port)` method.
     ```javascript
     app.listen(3000); // Example port, change as needed
     ```

3. **Defining Routes:**
   - Express routes have the structure `app.METHOD(PATH, HANDLER)`.
     - `METHOD`: HTTP method in lowercase.
     - `PATH`: Relative path on the server.
     - `HANDLER`: Function called when the route is matched.

4. **Example Route Handler:**
   - Define a route with a handler function:
     ```javascript
     app.get('/', function(req, res) {
       res.send('Response String');
     });
     ```
   - This example serves the string 'Response String' when the root path ('/') is accessed using the GET method.

5. **Handler Function Parameters:**
   - Handlers take the form `function(req, res) {...}`.
     - `req`: Request object.
     - `res`: Response object.

6. **Putting It All Together:**
   - Your myApp.js file could look like this:
     ```javascript
     const express = require('express');
     const app = express();

     app.get('/', function(req, res) {
       res.send('Response String');
     });

     app.listen(3000); // Example port, change as needed
     ```
   - This sets up a basic Express app, defines a route for the root path, and serves a response string when accessed.

DAY 37
#Serve an HTML File
- Use `res.sendFile(path)` method to respond to requests with a file.
- Place it inside the `app.get('/', ...)` route handler.
- `res.sendFile(path)` sets headers and sends the file based on its type.
- Use `__dirname` to calculate the absolute file path.

**Example:**
```javascript
app.get('/', function(req, res) {
  const absolutePath = __dirname + '/relativePath/index.html';
  res.sendFile(absolutePath);
});
```

#Serve Static Assets with Express
- Use `express.static(path)` middleware to handle static assets (e.g., stylesheets, scripts, images).
- `path` parameter is the absolute path of the folder containing the assets.

**Implementation:**
```javascript
// Specify the folder containing static assets
const assetsPath = __dirname + '/public';

// Use express.static middleware to serve static assets
app.use(express.static(assetsPath));
```

- In this example, the `public` folder contains static assets like stylesheets, scripts, and images.
- The `express.static` middleware is mounted using `app.use(path, middlewareFunction)`.
- Requests for static assets are automatically handled by Express without the need for explicit route handlers.
- Adjust the `assetsPath` according to your project structure.

DAY 38
1. **REST API Purpose:**
   - An API serves data, and a REST API facilitates data exchange without the need for clients to understand server details.

2. **Resource Access:**
   - Clients only need to know the resource's location (URL) and the action to perform (verb), such as using the GET verb for fetching information without modification.

3. **Data Format:**
   - JSON (JavaScript Object Notation) is the preferred format for moving information on the web, representing JavaScript objects as strings for easy transmission.

4. **Creating a Simple API Route:**
   - Use the `app.get()` method to create a route that responds with JSON.
   - Example: `app.get('/json', function(req, res) { /* route handler here */ });`

5. **Handling JSON Response:**
   - Inside the route handler, use `res.json()` method, passing in an object as an argument.
   - This method converts the JavaScript object into a string, sets appropriate headers indicating JSON, and sends the data back.

6. **Valid JavaScript Object:**
   - A valid object structure is `{key: data}`, where data can be a number, string, nested object, array, variable, or the result of a function call.

7. **Example Response:**
   - Serve the object `{"message": "Hello json"}` in JSON format as a response to GET requests to the `/json` route.

8. **Testing:**
   - Access the route through your browser by navigating to `your-app-url/json` to see the displayed message.

Example:
app.get('/json', function(req, res) {
  res.json({"message": "Hello json"});
});

Note: Access the ouput in http://localhost:3000/json
