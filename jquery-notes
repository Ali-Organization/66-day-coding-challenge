DAY 30
jQuery
jQuery is one of the most widely used JavaScript libraries in the world.
In 2006 when it was released, all major browsers handled JavaScript slightly differently. 
jQuery simplified the process of writing client-side JavaScript, and also ensured that your code worked the same way in all browsers.
In this course, you'll learn how to use jQuery to select, remove, clone, and modify different elements on the page.

DAY 31
Learn How Script Tags and Document Ready Work - .ready()
$(document).ready() function, which is a jQuery method that waits for the HTML document to be fully loaded and ready before executing 
the code inside the function.

<script>
  $(document).ready(function() {
    // Code inside this block will be executed when the document is fully loaded.
    // You can include your JavaScript/jQuery code here.
  });
</script>
This structure is commonly used to ensure that your JavaScript/jQuery code runs only after the HTML document has been completely loaded.
It helps prevent issues where your script tries to interact with elements on the page that haven't been rendered yet.

Target HTML Elements with Selectors Using jQuery
All jQuery functions start with a $, usually referred to as a dollar sign operator, or as bling.
jQuery often selects an HTML element with a selector, then does something to that element.
For example, let's make all of your button elements bounce. Just add this code inside your document ready function:
$("button").addClass("animated bounce");
We selected them with $("button"), then we added some CSS classes to them with .addClass("animated bounce");.

Target Elements by Class Using jQuery - $(".className") and .addClass()
target your div elements with the class well by using the $(".well") selector then 
use jQuery's .addClass() function to add the classes animated and shake
$(".well").addClass("animated shake");

Target Elements by id Using jQuery - $("#id")
target your button element with the id target3 by using the $("#target3")
$("#target3").addClass("animated fadeOut");

Remove Classes from an Element with jQuery - .removeClass()
jQuery's removeClass() function
Let's remove the btn-default class from all of our button elements
$("button").removeClass("btn-default");

DAY 32
Change the CSS of an Element Using jQuerY - .css()
We can also change the CSS of an HTML element directly with jQuery.
jQuery has a function called .css() that allows you to change the CSS of an element.
$("#target1").css("color", "blue");

Disable an Element Using jQuery - .prop()
You can also change the non-CSS properties of HTML elements with jQuery. For example, you can disable buttons.
When you disable a button, it will become grayed-out and can no longer be clicked.
jQuery has a function called .prop() that allows you to adjust the properties of elements.
$("button").prop("disabled", true);

Change Text Inside an Element Using jQuery - .html() and .text()
Using jQuery, you can change the text between the start and end tags of an element. You can even change HTML markup.
jQuery has a function called .html() that lets you add HTML tags and text within an element. Any content previously within the element 
will be completely replaced with the content you provide using this function.
$("h3").html("<em>jQuery Playground</em>");

jQuery also has a similar function called .text() that only alters text without adding tags. In other words, this function will not 
evaluate any HTML tags passed to it, but will instead treat it as the text you want to replace the existing content with.

Remove an Element Using jQuery - .remove()
Now let's remove an HTML element from your page using jQuery.
jQuery has a function called .remove() that will remove an HTML element entirely.

Use appendTo to Move Elements with jQuery - .appendTo()
jQuery has a function called appendTo() that allows you to select HTML elements and append them to another element.
For example, if we wanted to move target4 from our right well to our left well, we would use:
$("#target4").appendTo("#left-well");

Clone an Element Using jQuery - .clone()
jQuery has a function called clone() that makes a copy of an element.
For example, if we wanted to copy target2 from our left-well to our right-well, we would use:
$("#target2").clone().appendTo("#right-well");

Function Chaining
Sticking two jQuery functions together is called function chaining.
$("#target2").clone().appendTo("#right-well");
.clone() and .appendTo() are two different functions

Target the Parent of an Element Using jQuery - .parent()
Every HTML element has a parent element from which it inherits properties.
For example, the h3 element in your jQuery Playground has the parent element of <div class="container-fluid">, which itself has the parent
element of body. jQuery has a function called parent() that allows you to access the parent of whichever element you've selected.
Here's an example of how you would use the parent() function if you wanted to give the parent element of the left-well element a 
background color of blue:
$("#left-well").parent().css("background-color", "blue");

Target the Children of an Element Using jQuery - .children()
When HTML elements are placed one level below another they are called children of that element. For example, the button elements in this 
challenge with the text #target1, #target2, and #target3 are all children of the <div class="well" id="left-well"> element.
jQuery has a function called children() that allows you to access the children of whichever element you've selected.
Here's an example of how you would use the children() function to give the children of your left-well element the color blue:
$("#left-well").children().css("color", "blue");

Target a Specific Child of an Element Using jQuery - $(".target:nth-child(3)")
You've seen why id attributes are so convenient for targeting with jQuery selectors. But you won't always have such neat ids to work with.
Fortunately, jQuery has some other tricks for targeting the right elements.
jQuery uses CSS Selectors to target elements. The target:nth-child(n) CSS selector allows you to select all the nth elements with the 
target class or element type.
Here's how you would give the third element in each well the bounce class:
$(".target:nth-child(3)").addClass("animated bounce");

